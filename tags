!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGB	2d/2d.h	/^    class ARGB$/;"	c	namespace:_2d
BMP_H	bmp/bmp.h	2;"	d
BmpFile	bmp/bmp.cpp	/^    BmpFile::BmpFile(const char * const filename)$/;"	f	class:_bmp::BmpFile	signature:(const char * const filename)
BmpFile	bmp/bmp.h	/^    BmpFile(const char * const filename);$/;"	p	class:_bmp::BmpFile	access:public	signature:(const char * const filename)
BmpFile	bmp/bmp.h	/^class BmpFile$/;"	c	namespace:_bmp
BmpFileHead	bmp/bmp.h	/^    class BmpFileHead$/;"	c	class:_bmp::BmpFile	access:public
BmpInfoHead	bmp/bmp.h	/^    class BmpInfoHead$/;"	c	class:_bmp::BmpFile	access:public
DEBUG	2d/2d.cpp	9;"	d	file:
DEBUG	2d/2d.h	4;"	d
DIRECT3D_H	window/direct3D.h	2;"	d
DRAW_H	window/draw.h	2;"	d
Direct3DCleanup	window/direct3D.cpp	/^	void Direct3DCleanup()$/;"	f	namespace:_direct3D	signature:()
Direct3DCleanup	window/direct3D.h	/^	void Direct3DCleanup();\/\/清理direct3d$/;"	p	namespace:_direct3D	signature:()
DrawLine	window/draw.cpp	/^    int DrawLine(int x0, int y0, int x1, int y1, DWORD color)  $/;"	f	namespace:_draw	signature:(int x0, int y0, int x1, int y1, DWORD color)
DrawPixel	window/direct3D.h	/^	inline void DrawPixel(int x,int y, DWORD color)$/;"	f	namespace:_direct3D	signature:(int x,int y, DWORD color)
DrawPixel	window/direct3D.h	/^    inline void DrawPixel(int x, int y, DWORD color); \/\/没有检查出界$/;"	p	namespace:_direct3D	signature:(int x, int y, DWORD color)
DrawPoint	window/draw.cpp	/^    inline int DrawPoint(int x, int y, DWORD color)$/;"	f	namespace:_draw	signature:(int x, int y, DWORD color)
FLUSH_H_	window/flush.h	2;"	d
FlipSurface	window/direct3D.cpp	/^	void FlipSurface()$/;"	f	namespace:_direct3D	signature:()
FlipSurface	window/direct3D.h	/^	void FlipSurface();    $/;"	p	namespace:_direct3D	signature:()
GAMEMAIN	window/gamemain.h	2;"	d
GameMain	window/gamemain.cpp	/^	int GameMain()$/;"	f	namespace:_gamemain	signature:()
GameMain	window/gamemain.h	/^	int GameMain();$/;"	p	namespace:_gamemain	signature:()
Game_Init	window/gamemain.cpp	/^	int Game_Init(HWND hwnd,int width,int height)$/;"	f	namespace:_gamemain	signature:(HWND hwnd,int width,int height)
Game_Init	window/gamemain.h	/^	int Game_Init(HWND hwnd,int width,int height);$/;"	p	namespace:_gamemain	signature:(HWND hwnd,int width,int height)
Game_Shutdown	window/gamemain.cpp	/^	int Game_Shutdown()$/;"	f	namespace:_gamemain	signature:()
Game_Shutdown	window/gamemain.h	/^	int Game_Shutdown();$/;"	p	namespace:_gamemain	signature:()
GetClock	window/gamemain.cpp	/^	DWORD GetClock()$/;"	f	namespace:_gamemain	signature:()
Image	2d/2d.h	/^        Image();$/;"	p	class:_2d::Image	access:public	signature:()
Image	2d/2d.h	/^        Image(const Image<T> & other_image);$/;"	p	class:_2d::Image	access:public	signature:(const Image<T> & other_image)
Image	2d/2d.h	/^        Image(int width, int height);$/;"	p	class:_2d::Image	access:public	signature:(int width, int height)
Image	2d/2d.h	/^    Image<T>::Image()$/;"	f	class:_2d::Image	signature:()
Image	2d/2d.h	/^    Image<T>::Image(const Image<T> & other_image)$/;"	f	class:_2d::Image	signature:(const Image<T> & other_image)
Image	2d/2d.h	/^    Image<T>::Image(int width, int height)$/;"	f	class:_2d::Image	signature:(int width, int height)
Image	2d/2d.h	/^    class Image$/;"	c	namespace:_2d
InitDirect3D	window/direct3D.cpp	/^	HRESULT InitDirect3D(HWND hwnd,int width,int height)$/;"	f	namespace:_direct3D	signature:(HWND hwnd,int width,int height)
InitDirect3D	window/direct3D.h	/^	HRESULT InitDirect3D(HWND hwnd,int width,int height);\/\/初始化direct3d$/;"	p	namespace:_direct3D	signature:(HWND hwnd,int width,int height)
LockSurface	window/direct3D.cpp	/^	int LockSurface()$/;"	f	namespace:_direct3D	signature:()
LockSurface	window/direct3D.h	/^	int LockSurface();$/;"	p	namespace:_direct3D	signature:()
PI	tri/tri.h	/^    const double PI = ::acos(-1.0);$/;"	m	namespace:_tri
PRECISION	tri/tri.cpp	/^    const int PRECISION = 1;$/;"	m	namespace:_tri	file:
Point_2d	2d/2d.h	/^    class Point_2d$/;"	c	namespace:_2d
StartClock	window/gamemain.cpp	/^	void StartClock()$/;"	f	namespace:_gamemain	signature:()
TABLE_LEN	tri/tri.cpp	/^    const int TABLE_LEN = 360 \/ PRECISION;$/;"	m	namespace:_tri	file:
TEST	test/test.h	2;"	d
TRI_H_	tri/tri.h	2;"	d
UnlockSurface	window/direct3D.cpp	/^	int UnlockSurface()$/;"	f	namespace:_direct3D	signature:()
UnlockSurface	window/direct3D.h	/^	int UnlockSurface();$/;"	p	namespace:_direct3D	signature:()
WAIT_TIME	window/gamemain.cpp	/^const int WAIT_TIME = 30;$/;"	v
WNDHEIGHT	window/direct3D.cpp	/^const int WNDHEIGHT = 480 ;$/;"	v
WNDHEIGHT	window/mywindow.cpp	/^const int WNDHEIGHT = 480 ;$/;"	v
WNDWIDTH	window/direct3D.cpp	/^const int WNDWIDTH = 640 ;$/;"	v
WNDWIDTH	window/mywindow.cpp	/^const int WNDWIDTH = 640 ;$/;"	v
WaitClock	window/gamemain.cpp	/^	void WaitClock()$/;"	f	namespace:_gamemain	signature:()
WinMain	window/mywindow.cpp	/^int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd )$/;"	f	signature:(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd )
_2D_H	2d/2d.h	2;"	d
_2d	2d/2d.cpp	/^namespace _2d$/;"	n	file:
_2d	2d/2d.h	/^namespace _2d{$/;"	n
_2d::ARGB	2d/2d.h	/^    class ARGB$/;"	c	namespace:_2d
_2d::ARGB::a	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
_2d::ARGB::b	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
_2d::ARGB::g	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
_2d::ARGB::r	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
_2d::Image	2d/2d.h	/^    class Image$/;"	c	namespace:_2d
_2d::Image::Image	2d/2d.h	/^        Image();$/;"	p	class:_2d::Image	access:public	signature:()
_2d::Image::Image	2d/2d.h	/^        Image(const Image<T> & other_image);$/;"	p	class:_2d::Image	access:public	signature:(const Image<T> & other_image)
_2d::Image::Image	2d/2d.h	/^        Image(int width, int height);$/;"	p	class:_2d::Image	access:public	signature:(int width, int height)
_2d::Image::Image	2d/2d.h	/^    Image<T>::Image()$/;"	f	class:_2d::Image	signature:()
_2d::Image::Image	2d/2d.h	/^    Image<T>::Image(const Image<T> & other_image)$/;"	f	class:_2d::Image	signature:(const Image<T> & other_image)
_2d::Image::Image	2d/2d.h	/^    Image<T>::Image(int width, int height)$/;"	f	class:_2d::Image	signature:(int width, int height)
_2d::Image::create	2d/2d.h	/^        void create(int width, int height);$/;"	p	class:_2d::Image	access:public	signature:(int width, int height)
_2d::Image::create	2d/2d.h	/^    void Image<T>::create(int _width, int _height)$/;"	f	class:_2d::Image	signature:(int _width, int _height)
_2d::Image::data	2d/2d.h	/^        T * data;$/;"	m	class:_2d::Image	access:private
_2d::Image::has_data	2d/2d.h	/^        bool has_data;$/;"	m	class:_2d::Image	access:private
_2d::Image::height	2d/2d.h	/^        int width, height;$/;"	m	class:_2d::Image	access:private
_2d::Image::operator =	2d/2d.h	/^        Image & operator = (const Image<T> & other_image);$/;"	p	class:_2d::Image	access:public	signature:(const Image<T> & other_image)
_2d::Image::operator =	2d/2d.h	/^    Image<T> & Image<T>::operator = (const Image<T> & other_image)$/;"	f	class:_2d::Image	signature:(const Image<T> & other_image)
_2d::Image::operator []	2d/2d.h	/^        T & operator[](Point_2d point);$/;"	p	class:_2d::Image	access:public	signature:(Point_2d point)
_2d::Image::operator []	2d/2d.h	/^        T * operator[](int x);$/;"	p	class:_2d::Image	access:public	signature:(int x)
_2d::Image::operator []	2d/2d.h	/^    T & Image<T>::operator [] (Point_2d point)$/;"	f	class:_2d::Image	signature:(Point_2d point)
_2d::Image::operator []	2d/2d.h	/^    T * Image<T>::operator[](int x)$/;"	f	class:_2d::Image	signature:(int x)
_2d::Image::output	2d/2d.h	/^        void output();$/;"	p	class:_2d::Image	access:public	signature:()
_2d::Image::output	2d/2d.h	/^    void Image<T>::output()$/;"	f	class:_2d::Image	signature:()
_2d::Image::width	2d/2d.h	/^        int width, height;$/;"	m	class:_2d::Image	access:private
_2d::Image::~Image	2d/2d.h	/^        virtual ~Image();$/;"	p	class:_2d::Image	access:public	signature:()
_2d::Image::~Image	2d/2d.h	/^    Image<T>::~Image()$/;"	f	class:_2d::Image	signature:()
_2d::Point_2d	2d/2d.h	/^    class Point_2d$/;"	c	namespace:_2d
_2d::Point_2d::x	2d/2d.h	/^        int x, y;$/;"	m	class:_2d::Point_2d	access:public
_2d::Point_2d::y	2d/2d.h	/^        int x, y;$/;"	m	class:_2d::Point_2d	access:public
_2d::operator <<	2d/2d.cpp	/^    ostream & operator<<(ostream & out, const ARGB & argb)$/;"	f	namespace:_2d	signature:(ostream & out, const ARGB & argb)
_bmp	bmp/bmp.cpp	/^namespace _bmp{$/;"	n	file:
_bmp	bmp/bmp.h	/^namespace _bmp{$/;"	n
_bmp::BmpFile	bmp/bmp.h	/^class BmpFile$/;"	c	namespace:_bmp
_bmp::BmpFile::BmpFile	bmp/bmp.cpp	/^    BmpFile::BmpFile(const char * const filename)$/;"	f	class:_bmp::BmpFile	signature:(const char * const filename)
_bmp::BmpFile::BmpFile	bmp/bmp.h	/^    BmpFile(const char * const filename);$/;"	p	class:_bmp::BmpFile	access:public	signature:(const char * const filename)
_bmp::BmpFile::BmpFileHead	bmp/bmp.h	/^    class BmpFileHead$/;"	c	class:_bmp::BmpFile	access:public
_bmp::BmpFile::BmpFileHead::type1	bmp/bmp.h	/^    public: char type1,type2;$/;"	m	class:_bmp::BmpFile::BmpFileHead	access:public
_bmp::BmpFile::BmpFileHead::type2	bmp/bmp.h	/^    public: char type1,type2;$/;"	m	class:_bmp::BmpFile::BmpFileHead	access:public
_bmp::BmpFile::BmpInfoHead	bmp/bmp.h	/^    class BmpInfoHead$/;"	c	class:_bmp::BmpFile	access:public
_bmp::BmpFile::BmpInfoHead::bitColor	bmp/bmp.h	/^        unsigned short    bitColor;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::blank	bmp/bmp.h	/^        unsigned int blank;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::colorImportant	bmp/bmp.h	/^        unsigned int    colorImportant;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::colorPlane	bmp/bmp.h	/^        unsigned short    colorPlane;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::colorUse	bmp/bmp.h	/^        unsigned int    colorUse;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::height	bmp/bmp.h	/^        unsigned int    height;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::imageSize	bmp/bmp.h	/^        unsigned int imageSize;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::length	bmp/bmp.h	/^        unsigned int    length;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::realSize	bmp/bmp.h	/^        unsigned int    realSize;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::startPosition	bmp/bmp.h	/^        unsigned int startPosition;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::width	bmp/bmp.h	/^        unsigned int    width;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::xPels	bmp/bmp.h	/^        unsigned int    xPels;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::yPels	bmp/bmp.h	/^        unsigned int    yPels;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::BmpInfoHead::zipFormat	bmp/bmp.h	/^        unsigned int    zipFormat;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
_bmp::BmpFile::channels	bmp/bmp.h	/^    int channels;$/;"	m	class:_bmp::BmpFile	access:public
_bmp::BmpFile::filehead	bmp/bmp.h	/^    BmpFileHead filehead;$/;"	m	class:_bmp::BmpFile	access:public
_bmp::BmpFile::infohead	bmp/bmp.h	/^    BmpInfoHead infohead;$/;"	m	class:_bmp::BmpFile	access:public
_bmp::BmpFile::pData	bmp/bmp.h	/^    unsigned char * pData;$/;"	m	class:_bmp::BmpFile	access:public
_bmp::BmpFile::~BmpFile	bmp/bmp.cpp	/^    BmpFile::~BmpFile()$/;"	f	class:_bmp::BmpFile	signature:()
_bmp::BmpFile::~BmpFile	bmp/bmp.h	/^    ~BmpFile();$/;"	p	class:_bmp::BmpFile	access:public	signature:()
_direct3D	window/direct3D.cpp	/^namespace _direct3D{$/;"	n	file:
_direct3D	window/direct3D.h	/^namespace _direct3D$/;"	n
_direct3D::Direct3DCleanup	window/direct3D.cpp	/^	void Direct3DCleanup()$/;"	f	namespace:_direct3D	signature:()
_direct3D::Direct3DCleanup	window/direct3D.h	/^	void Direct3DCleanup();\/\/清理direct3d$/;"	p	namespace:_direct3D	signature:()
_direct3D::DrawPixel	window/direct3D.h	/^	inline void DrawPixel(int x,int y, DWORD color)$/;"	f	namespace:_direct3D	signature:(int x,int y, DWORD color)
_direct3D::DrawPixel	window/direct3D.h	/^    inline void DrawPixel(int x, int y, DWORD color); \/\/没有检查出界$/;"	p	namespace:_direct3D	signature:(int x, int y, DWORD color)
_direct3D::FlipSurface	window/direct3D.cpp	/^	void FlipSurface()$/;"	f	namespace:_direct3D	signature:()
_direct3D::FlipSurface	window/direct3D.h	/^	void FlipSurface();    $/;"	p	namespace:_direct3D	signature:()
_direct3D::InitDirect3D	window/direct3D.cpp	/^	HRESULT InitDirect3D(HWND hwnd,int width,int height)$/;"	f	namespace:_direct3D	signature:(HWND hwnd,int width,int height)
_direct3D::InitDirect3D	window/direct3D.h	/^	HRESULT InitDirect3D(HWND hwnd,int width,int height);\/\/初始化direct3d$/;"	p	namespace:_direct3D	signature:(HWND hwnd,int width,int height)
_direct3D::LockSurface	window/direct3D.cpp	/^	int LockSurface()$/;"	f	namespace:_direct3D	signature:()
_direct3D::LockSurface	window/direct3D.h	/^	int LockSurface();$/;"	p	namespace:_direct3D	signature:()
_direct3D::UnlockSurface	window/direct3D.cpp	/^	int UnlockSurface()$/;"	f	namespace:_direct3D	signature:()
_direct3D::UnlockSurface	window/direct3D.h	/^	int UnlockSurface();$/;"	p	namespace:_direct3D	signature:()
_direct3D::g_pd3dDevice	window/direct3D.cpp	/^	LPDIRECT3DDEVICE9 g_pd3dDevice=NULL; \/\/direct3d设备接口$/;"	m	namespace:_direct3D	file:
_direct3D::g_pd3dSurface	window/direct3D.cpp	/^	LPDIRECT3DSURFACE9 g_pd3dSurface=NULL;$/;"	m	namespace:_direct3D	file:
_direct3D::lockedRect	window/direct3D.cpp	/^	D3DLOCKED_RECT lockedRect;$/;"	m	namespace:_direct3D	file:
_draw	window/draw.cpp	/^namespace _draw{$/;"	n	file:
_draw	window/draw.h	/^namespace _draw{$/;"	n
_draw::DrawLine	window/draw.cpp	/^    int DrawLine(int x0, int y0, int x1, int y1, DWORD color)  $/;"	f	namespace:_draw	signature:(int x0, int y0, int x1, int y1, DWORD color)
_draw::DrawPoint	window/draw.cpp	/^    inline int DrawPoint(int x, int y, DWORD color)$/;"	f	namespace:_draw	signature:(int x, int y, DWORD color)
_draw::draw_line	window/draw.h	/^void draw_line(Point_2d start, Point_2d end, ARGB argb);$/;"	p	namespace:_draw	signature:(Point_2d start, Point_2d end, ARGB argb)
_draw::draw_picture	window/draw.h	/^void draw_picture(Point_2d startpoint, Picture picure );$/;"	p	namespace:_draw	signature:(Point_2d startpoint, Picture picure )
_draw::draw_point	window/draw.h	/^void draw_point(int x, int y, ARGB argb);$/;"	p	namespace:_draw	signature:(int x, int y, ARGB argb)
_flush	window/flush.cpp	/^namespace _flush{$/;"	n	file:
_flush	window/flush.h	/^namespace _flush{$/;"	n
_flush::flushscreen	window/flush.cpp	/^	int flushscreen(){$/;"	f	namespace:_flush	signature:()
_flush::flushscreen	window/flush.h	/^  int flushscreen();$/;"	p	namespace:_flush	signature:()
_gamemain	window/gamemain.cpp	/^namespace _gamemain{$/;"	n	file:
_gamemain	window/gamemain.h	/^namespace _gamemain$/;"	n
_gamemain::GameMain	window/gamemain.cpp	/^	int GameMain()$/;"	f	namespace:_gamemain	signature:()
_gamemain::GameMain	window/gamemain.h	/^	int GameMain();$/;"	p	namespace:_gamemain	signature:()
_gamemain::Game_Init	window/gamemain.cpp	/^	int Game_Init(HWND hwnd,int width,int height)$/;"	f	namespace:_gamemain	signature:(HWND hwnd,int width,int height)
_gamemain::Game_Init	window/gamemain.h	/^	int Game_Init(HWND hwnd,int width,int height);$/;"	p	namespace:_gamemain	signature:(HWND hwnd,int width,int height)
_gamemain::Game_Shutdown	window/gamemain.cpp	/^	int Game_Shutdown()$/;"	f	namespace:_gamemain	signature:()
_gamemain::Game_Shutdown	window/gamemain.h	/^	int Game_Shutdown();$/;"	p	namespace:_gamemain	signature:()
_gamemain::GetClock	window/gamemain.cpp	/^	DWORD GetClock()$/;"	f	namespace:_gamemain	signature:()
_gamemain::StartClock	window/gamemain.cpp	/^	void StartClock()$/;"	f	namespace:_gamemain	signature:()
_gamemain::WaitClock	window/gamemain.cpp	/^	void WaitClock()$/;"	f	namespace:_gamemain	signature:()
_gamemain::g_clock	window/gamemain.cpp	/^	DWORD g_clock;$/;"	m	namespace:_gamemain	file:
_tri	tri/tri.cpp	/^namespace _tri$/;"	n	file:
_tri	tri/tri.h	/^namespace _tri$/;"	n
_tri::PI	tri/tri.h	/^    const double PI = ::acos(-1.0);$/;"	m	namespace:_tri
_tri::PRECISION	tri/tri.cpp	/^    const int PRECISION = 1;$/;"	m	namespace:_tri	file:
_tri::TABLE_LEN	tri/tri.cpp	/^    const int TABLE_LEN = 360 \/ PRECISION;$/;"	m	namespace:_tri	file:
_tri::acos	tri/tri.cpp	/^    double acos(double value)$/;"	f	namespace:_tri	signature:(double value)
_tri::acos	tri/tri.h	/^    double acos(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::acot	tri/tri.cpp	/^    double acot(double value)$/;"	f	namespace:_tri	signature:(double value)
_tri::acot	tri/tri.h	/^    double acot(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::ang_to_rad	tri/tri.h	/^    inline double ang_to_rad( double ang )$/;"	f	namespace:_tri	signature:( double ang )
_tri::asin	tri/tri.cpp	/^    double asin(double value)$/;"	f	namespace:_tri	signature:(double value)
_tri::asin	tri/tri.h	/^    double asin(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::asin_table	tri/tri.cpp	/^    double asin_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
_tri::atan	tri/tri.cpp	/^    double atan(double value)$/;"	f	namespace:_tri	signature:(double value)
_tri::atan	tri/tri.h	/^    double atan(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::atan_table	tri/tri.cpp	/^    double atan_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
_tri::cos	tri/tri.cpp	/^    double cos( double ang )$/;"	f	namespace:_tri	signature:( double ang )
_tri::cos	tri/tri.h	/^    double cos(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::cot	tri/tri.cpp	/^    double cot( double ang )$/;"	f	namespace:_tri	signature:( double ang )
_tri::cot	tri/tri.h	/^    double cot(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::init_tri_table	tri/tri.cpp	/^    void init_tri_table()$/;"	f	namespace:_tri	signature:()
_tri::init_tri_table	tri/tri.h	/^    void init_tri_table();$/;"	p	namespace:_tri	signature:()
_tri::rad_to_ang	tri/tri.h	/^    inline double rad_to_ang( double rad )$/;"	f	namespace:_tri	signature:( double rad )
_tri::sin	tri/tri.cpp	/^    double sin( double ang )$/;"	f	namespace:_tri	signature:( double ang )
_tri::sin	tri/tri.h	/^    double sin(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::sin_table	tri/tri.cpp	/^    double sin_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
_tri::tan	tri/tri.cpp	/^    double tan( double ang )$/;"	f	namespace:_tri	signature:( double ang )
_tri::tan	tri/tri.h	/^    double tan(double ang);$/;"	p	namespace:_tri	signature:(double ang)
_tri::tan_table	tri/tri.cpp	/^    double tan_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
a	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
abs	tri/test.cpp	/^double abs(double n)$/;"	f	signature:(double n)
acos	tri/tri.cpp	/^    double acos(double value)$/;"	f	namespace:_tri	signature:(double value)
acos	tri/tri.h	/^    double acos(double ang);$/;"	p	namespace:_tri	signature:(double ang)
acot	tri/tri.cpp	/^    double acot(double value)$/;"	f	namespace:_tri	signature:(double value)
acot	tri/tri.h	/^    double acot(double ang);$/;"	p	namespace:_tri	signature:(double ang)
ang_to_rad	tri/tri.h	/^    inline double ang_to_rad( double ang )$/;"	f	namespace:_tri	signature:( double ang )
asin	tri/tri.cpp	/^    double asin(double value)$/;"	f	namespace:_tri	signature:(double value)
asin	tri/tri.h	/^    double asin(double ang);$/;"	p	namespace:_tri	signature:(double ang)
asin_table	tri/tri.cpp	/^    double asin_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
atan	tri/tri.cpp	/^    double atan(double value)$/;"	f	namespace:_tri	signature:(double value)
atan	tri/tri.h	/^    double atan(double ang);$/;"	p	namespace:_tri	signature:(double ang)
atan_table	tri/tri.cpp	/^    double atan_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
b	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
bitColor	bmp/bmp.h	/^        unsigned short    bitColor;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
blank	bmp/bmp.h	/^        unsigned int blank;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
channels	bmp/bmp.h	/^    int channels;$/;"	m	class:_bmp::BmpFile	access:public
colorImportant	bmp/bmp.h	/^        unsigned int    colorImportant;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
colorPlane	bmp/bmp.h	/^        unsigned short    colorPlane;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
colorUse	bmp/bmp.h	/^        unsigned int    colorUse;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
cos	tri/tri.cpp	/^    double cos( double ang )$/;"	f	namespace:_tri	signature:( double ang )
cos	tri/tri.h	/^    double cos(double ang);$/;"	p	namespace:_tri	signature:(double ang)
cot	tri/tri.cpp	/^    double cot( double ang )$/;"	f	namespace:_tri	signature:( double ang )
cot	tri/tri.h	/^    double cot(double ang);$/;"	p	namespace:_tri	signature:(double ang)
create	2d/2d.h	/^        void create(int width, int height);$/;"	p	class:_2d::Image	access:public	signature:(int width, int height)
create	2d/2d.h	/^    void Image<T>::create(int _width, int _height)$/;"	f	class:_2d::Image	signature:(int _width, int _height)
data	2d/2d.h	/^        T * data;$/;"	m	class:_2d::Image	access:private
draw_line	window/draw.h	/^void draw_line(Point_2d start, Point_2d end, ARGB argb);$/;"	p	namespace:_draw	signature:(Point_2d start, Point_2d end, ARGB argb)
draw_picture	window/draw.h	/^void draw_picture(Point_2d startpoint, Picture picure );$/;"	p	namespace:_draw	signature:(Point_2d startpoint, Picture picure )
draw_point	window/draw.h	/^void draw_point(int x, int y, ARGB argb);$/;"	p	namespace:_draw	signature:(int x, int y, ARGB argb)
filehead	bmp/bmp.h	/^    BmpFileHead filehead;$/;"	m	class:_bmp::BmpFile	access:public
flushscreen	window/flush.cpp	/^	int flushscreen(){$/;"	f	namespace:_flush	signature:()
flushscreen	window/flush.h	/^  int flushscreen();$/;"	p	namespace:_flush	signature:()
g	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
g_clock	window/gamemain.cpp	/^	DWORD g_clock;$/;"	m	namespace:_gamemain	file:
g_pd3dDevice	window/direct3D.cpp	/^	LPDIRECT3DDEVICE9 g_pd3dDevice=NULL; \/\/direct3d设备接口$/;"	m	namespace:_direct3D	file:
g_pd3dSurface	window/direct3D.cpp	/^	LPDIRECT3DSURFACE9 g_pd3dSurface=NULL;$/;"	m	namespace:_direct3D	file:
has_data	2d/2d.h	/^        bool has_data;$/;"	m	class:_2d::Image	access:private
height	2d/2d.h	/^        int width, height;$/;"	m	class:_2d::Image	access:private
height	bmp/bmp.h	/^        unsigned int    height;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
imageSize	bmp/bmp.h	/^        unsigned int imageSize;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
infohead	bmp/bmp.h	/^    BmpInfoHead infohead;$/;"	m	class:_bmp::BmpFile	access:public
init_tri_table	tri/tri.cpp	/^    void init_tri_table()$/;"	f	namespace:_tri	signature:()
init_tri_table	tri/tri.h	/^    void init_tri_table();$/;"	p	namespace:_tri	signature:()
length	bmp/bmp.h	/^        unsigned int    length;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
lockedRect	window/direct3D.cpp	/^	D3DLOCKED_RECT lockedRect;$/;"	m	namespace:_direct3D	file:
main	2d/test.cpp	/^int main()$/;"	f	signature:()
main	bmp/test.cpp	/^int main()$/;"	f	signature:()
main	test/test.cpp	/^int main()$/;"	f	signature:()
main	tri/test.cpp	/^int main()$/;"	f	signature:()
myWndProc	window/mywindow.cpp	/^LRESULT CALLBACK myWndProc(HWND hwnd,UINT msg,WPARAM wparam,LPARAM lparam)$/;"	f	signature:(HWND hwnd,UINT msg,WPARAM wparam,LPARAM lparam)
myWndProc	window/mywindow.cpp	/^LRESULT CALLBACK myWndProc(HWND,UINT,WPARAM,LPARAM);$/;"	p	file:	signature:(HWND,UINT,WPARAM,LPARAM)
operator <<	2d/2d.cpp	/^    ostream & operator<<(ostream & out, const ARGB & argb)$/;"	f	namespace:_2d	signature:(ostream & out, const ARGB & argb)
operator =	2d/2d.h	/^        Image & operator = (const Image<T> & other_image);$/;"	p	class:_2d::Image	access:public	signature:(const Image<T> & other_image)
operator =	2d/2d.h	/^    Image<T> & Image<T>::operator = (const Image<T> & other_image)$/;"	f	class:_2d::Image	signature:(const Image<T> & other_image)
operator []	2d/2d.h	/^        T & operator[](Point_2d point);$/;"	p	class:_2d::Image	access:public	signature:(Point_2d point)
operator []	2d/2d.h	/^        T * operator[](int x);$/;"	p	class:_2d::Image	access:public	signature:(int x)
operator []	2d/2d.h	/^    T & Image<T>::operator [] (Point_2d point)$/;"	f	class:_2d::Image	signature:(Point_2d point)
operator []	2d/2d.h	/^    T * Image<T>::operator[](int x)$/;"	f	class:_2d::Image	signature:(int x)
output	2d/2d.h	/^        void output();$/;"	p	class:_2d::Image	access:public	signature:()
output	2d/2d.h	/^    void Image<T>::output()$/;"	f	class:_2d::Image	signature:()
pData	bmp/bmp.h	/^    unsigned char * pData;$/;"	m	class:_bmp::BmpFile	access:public
r	2d/2d.h	/^        unsigned char a, r, g, b;$/;"	m	class:_2d::ARGB	access:public
rad_to_ang	tri/tri.h	/^    inline double rad_to_ang( double rad )$/;"	f	namespace:_tri	signature:( double rad )
realSize	bmp/bmp.h	/^        unsigned int    realSize;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
sin	tri/tri.cpp	/^    double sin( double ang )$/;"	f	namespace:_tri	signature:( double ang )
sin	tri/tri.h	/^    double sin(double ang);$/;"	p	namespace:_tri	signature:(double ang)
sin_table	tri/tri.cpp	/^    double sin_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
startPosition	bmp/bmp.h	/^        unsigned int startPosition;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
tan	tri/tri.cpp	/^    double tan( double ang )$/;"	f	namespace:_tri	signature:( double ang )
tan	tri/tri.h	/^    double tan(double ang);$/;"	p	namespace:_tri	signature:(double ang)
tan_table	tri/tri.cpp	/^    double tan_table[ TABLE_LEN ];$/;"	m	namespace:_tri	file:
type1	bmp/bmp.h	/^    public: char type1,type2;$/;"	m	class:_bmp::BmpFile::BmpFileHead	access:public
type2	bmp/bmp.h	/^    public: char type1,type2;$/;"	m	class:_bmp::BmpFile::BmpFileHead	access:public
validate	test/test.h	/^inline void validate(bool to_be_validated, const char * const error_message)$/;"	f	signature:(bool to_be_validated, const char * const error_message)
width	2d/2d.h	/^        int width, height;$/;"	m	class:_2d::Image	access:private
width	bmp/bmp.h	/^        unsigned int    width;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
x	2d/2d.h	/^        int x, y;$/;"	m	class:_2d::Point_2d	access:public
xPels	bmp/bmp.h	/^        unsigned int    xPels;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
y	2d/2d.h	/^        int x, y;$/;"	m	class:_2d::Point_2d	access:public
yPels	bmp/bmp.h	/^        unsigned int    yPels;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
zipFormat	bmp/bmp.h	/^        unsigned int    zipFormat;$/;"	m	class:_bmp::BmpFile::BmpInfoHead	access:public
~BmpFile	bmp/bmp.cpp	/^    BmpFile::~BmpFile()$/;"	f	class:_bmp::BmpFile	signature:()
~BmpFile	bmp/bmp.h	/^    ~BmpFile();$/;"	p	class:_bmp::BmpFile	access:public	signature:()
~Image	2d/2d.h	/^        virtual ~Image();$/;"	p	class:_2d::Image	access:public	signature:()
~Image	2d/2d.h	/^    Image<T>::~Image()$/;"	f	class:_2d::Image	signature:()
